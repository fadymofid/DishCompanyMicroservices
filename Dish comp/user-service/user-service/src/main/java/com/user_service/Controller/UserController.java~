package com.user_service.Controller;

import com.user_service.Service.UserService;
import com.user_service.entity.User;
import com.user_service.entity.UserRole;
import jakarta.websocket.server.PathParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users")  
public class UserController {

    @Autowired
    private UserService userService;

    // Endpoint to register a new user
    @PostMapping("/register")
    public ResponseEntity<String> registerUser(@RequestBody User user) {
        UserRole userRole = user.getRole();
        boolean success = userService.registerUser(user.getUsername(), user.getPassword(), userRole, user.getBalance());
        if (success) {
            return ResponseEntity.ok("User registered successfully!");
        } else {
            return ResponseEntity.badRequest().body("Username already exists.");
        }
    }

    // Endpoint to authenticate user
    @PostMapping("/authenticate")
    public ResponseEntity<Map<String, Object>> authenticateUser(@RequestBody Map<String, String> credentials) {
        String username = credentials.get("username");
        String password = credentials.get("password");
        boolean authenticated = userService.authenticateUser(username, password);
        Map<String, Object> response = new HashMap<>();
        if (authenticated) {
            User user = userService.getUserByUsername(username);
            response.put("id", user.getId());
            response.put("username", user.getUsername());
            response.put("role", user.getRole().toString());
            return ResponseEntity.ok(response);
        } else {
            response.put("message", "Invalid username or password.");
            return ResponseEntity.badRequest().body(response);
        }
    }

    // Endpoint to fetch all users
    @GetMapping("/all")
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    // Endpoint to fetch all customers
    @GetMapping("/customers")
    public ResponseEntity<List<User>> getAllCustomers() {
        List<User> customers = userService.getAllCustomers();
        return ResponseEntity.ok(customers);
    }

    // Endpoint to fetch all sellers
    @GetMapping("/sellers")
    public ResponseEntity<List<User>> getAllSellers() {
        List<User> sellers = userService.getAllSellers();
        return ResponseEntity.ok(sellers);
    }

    // Endpoint to fetch a user by username
    @GetMapping("/{username}")
    public ResponseEntity<User> getUser(@PathVariable String username) {
        User user = userService.getUserByUsername(username);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Endpoint to fetch a user by id
    @GetMapping("/id/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        User user = userService.getUserById(id);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Endpoint to delete a user by username
    @DeleteMapping("/{username}")
    public ResponseEntity<String> deleteUser(@PathVariable String username) {
        boolean deleted = userService.deleteUser(username);
        if (deleted) {
            return ResponseEntity.ok("User deleted successfully!");
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    // Endpoint to get user balance by id
    @GetMapping("/balance/{id}")
    public ResponseEntity<Double> getUserBalance(@PathVariable Long id) {
        User user = userService.getUserById(id);
        if (user != null) {
            return ResponseEntity.ok(user.getBalance());
        }
         else {
            return ResponseEntity.notFound().build();
        }
    }

    // Endpoint to update (subtract from) user balance by id
    @PostMapping("/balance/{id}/deduct")
    public ResponseEntity<String> deductUserBalance(@PathVariable Long id, @RequestBody Map<String, Double> body) {
        Double amount = body.get("amount");
        if (amount == null || amount <= 0) {
            return ResponseEntity.badRequest().body("Invalid amount");
        }
        User user = userService.getUserById(id);
        if (user == null) {
            return ResponseEntity.notFound().build();
        }
        if (user.getBalance() < amount) {
            return ResponseEntity.badRequest().body("Insufficient balance");
        }
        user.setBalance(user.getBalance() - amount);
        userService.saveUser(user);
        return ResponseEntity.ok("Balance updated successfully");
    }
    @GetMapping("/internal/username/{userId}")
    public String getUsername(@PathVariable int userId) {
        User user = userService.findById(userId);
        return user != null ? user.getUsername() : "Unknown User";
    }
